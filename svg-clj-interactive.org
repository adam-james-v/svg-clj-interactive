* ;;
#+Title: svg-clj-interactive
#+AUTHOR: adam-james
#+STARTUP: overview
#+PROPERTY: header-args :cache yes :noweb yes :results inline :mkdirp yes :padline yes :async

** deps.edn
#+begin_src clojure :tangle ./deps.edn
{:paths
 ["src" "tests" "resources" "target"]

 :deps 
 {org.clojure/clojurescript     {:mvn/version "1.10.773"}
  reagent/reagent              {:mvn/version "0.10.0"}
  io.github.adam-james-v/svg-clj {:mvn/version "0.0.3-SNAPSHOT"}
  #_#_svg-clj/svg-clj {:local/root "/Users/adam/dev/svg-clj"}

  borkdude/sci                 {:mvn/version "0.2.6"}
  com.bhauman/figwheel-main     {:mvn/version "0.2.6"}}

 :aliases
 {:dev  {:main-opts ["-m" "figwheel.main" "--build" "dev" "--repl"]}
  :prod {:main-opts ["-m" "figwheel.main" "-b" "prod"]}}}
#+end_src

** build-config
To run a build:

~clj -m figwheel.main -b dev~
~clj -m figwheel.main -bo prod~

To build and produce a version to push to GH-PAGES:

~clj -m figwheel.main -bo prod~

Then:
mv or cp prod-main.js from

~./target/public/cljs-out/prod-main.js~

to

~./public/js/prod-main.js~

#+BEGIN_SRC clojure :tangle ./figwheel-main.edn
{:ring-server-options {:port 9553}}
#+END_SRC

#+BEGIN_SRC clojure :tangle ./dev.cljs.edn
^{:watch-dirs ["src"]
  :css-dirs ["resources"]}
{:main svg-clj-interactive.main}
#+END_SRC

#+BEGIN_SRC clojure :tangle ./prod.cljs.edn
^{:watch-dirs ["src"]
  :css-dirs ["resources"]}
{:main svg-clj-interactive.main
 :optimizations :simple}
#+END_SRC

* resources
*** html
#+BEGIN_SRC html :tangle ./resources/public/index.html
<!DOCTYPE html>
<html>
  <head>
    <title>svg-clj-interactive</title>
    <link rel="stylesheet" type="text/css" href="style.css" />
  </head>
  <body>
    <div id="root"></div>
    <script src="/js/codemirror.js" ></script>
    <script src="/js/clojure.js" ></script>
    <link rel="stylesheet" href="codemirror.css">
    <link rel="stylesheet" href="nord.css">
    <script src="/cljs-out/dev-main.js"></script>
  </body>
</html>
#+END_SRC

*** prod-html
The site is hosted with github pages, so the index file is saved directly into the project root.

#+BEGIN_SRC html :tangle ./index.html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8"/>
    <title>svg-clj-interactive</title>
    <link rel="stylesheet" href="public/style.css">
  </head>
  <body>
    <div id="root"></div>
    <script src="public/js/codemirror.js" ></script>
    <script src="public/js/clojure.js" ></script>
    <link rel="stylesheet" href="public/codemirror.css">
    <link rel="stylesheet" href="public/nord.css">
    <script src="public/js/prod-main.js"></script>
  </body>
</html>
#+END_SRC

*** css
#+BEGIN_SRC css :tangle ./resources/public/style.css
#root {
  margin: 0;
  padding: 0;
}

,*, *:after, *:before {
  box-sizing: border-box;
}

body {
  font: 12px/1.6 Georgia, "Times New Roman", Times, serif;
}

.CodeMirror {
  resize: both;
  border-radius: 11px 11px 4px 11px;
  box-shadow: rgba(19, 19, 19, 0.7) 0px 2px 8px 0px;
  margin: 7px;
}

table, input {
  font-size: 16px;
}

button, select {
  font-size: 14px;
}

h1, h2, h3, h4, h5, h6 {
  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
  line-height: 1.2;
}

text {
  font-family: monospace;
  stroke: none;
}

rect, line, path, polygon, polyline, circle, ellipse, text {
  vector-effect: non-scaling-stroke;
}

table {
  border-spacing: 0;
  border-collapse: collapse;
  text-align: left;
  padding-bottom: 25px;
  width: auto;
}

th, td {
  vertical-align: top;
  padding: 5px;
  border: 1px solid #ddd;
}

table ul {
  list-style-type: none;
  padding-left: 4px;
  margin: 0;
}

table li:before {
  content: â–¢ ;
}

table p {
  margin: 0;
}

td, th {
  padding: 5px;
  vertical-align: bottom;
}

td, th, hr {
  border-bottom: 1px solid #ddd;
}

hr {
  border: 0;
  margin: 25px 0;
}

code.block {
  border-radius: 11px 11px 11px 11px;
  box-shadow: rgba(19, 19, 19, 0.7) 0px 2px 8px 0px;
  margin: 7px;
  padding: 11px;
  background: #2e3440;
  color: #dedee9;
  white-space: pre-wrap;
  display: inline-block;
  width: 100%;
  max-height: 250px;
  overflow: auto;
}

.hidden {
  display: none;
}

body {
  margin: 7px auto;
  max-width: 100vw;
  color: #444;
  padding: 0 15px;
}

a {
  color: #07c;
  text-decoration: none;
}

a:hover {
  color: #059;
  text-decoration: underline;
}

pre {
  padding: 7px;
  white-space: pre-wrap;
}

button, select {
  background: #ddd;
  border: 0;
  padding: 9px 20px;
}

input {
  padding: 3px;
  vertical-align: bottom;
}

button:hover {
  background: #eee;
}

textarea {
  border-color: #ccc;
}
#+END_SRC

* ns

#+BEGIN_SRC clojure :tangle ./src/svg_clj_interactive/main.cljs
(ns ^:figwheel-hooks svg-clj-interactive.main
  (:require [clojure.string :as str]
            [reagent.dom :as rdom]
            [reagent.core :as r]
            [svg-clj.composites :as comp :refer [svg]]
            [svg-clj.utils :as utils]
            [svg-clj.elements :as el]
            [svg-clj.path :as path]
            [svg-clj.transforms :as tf]
            [svg-clj.parametric :as p]
            [svg-clj.layout :as lo]
            [sci.core :as sci]
            [cljs.pprint]
            [goog.async.Debouncer]))

#+END_SRC

* default-content
#+BEGIN_SRC clojure :tangle ./src/svg_clj_interactive/main.cljs
(def default-editor-content-01
  "(ns svg-clj-interactive.main
  (:require [clojure.string :as str]
            [svg-clj.composites :as comp :refer [svg]]
            [svg-clj.utils :as utils]
            [svg-clj.elements :as el]
            [svg-clj.path :as path]
            [svg-clj.transforms :as tf]
            [svg-clj.parametric :as p]
            [svg-clj.layout :as lo]))

(-> (el/circle 50)
    (tf/style {:fill \"skyblue\"
               :stroke \"slategray\"
               :stroke-width \"3px\"
               :opacity 0.7}))")

(def default-editor-content-02
  "(ns svg-clj-interactive.main
  (:require [clojure.string :as str]
            [svg-clj.composites :as comp :refer [svg]]
            [svg-clj.utils :as utils]
            [svg-clj.elements :as el]
            [svg-clj.path :as path]
            [svg-clj.transforms :as tf]
            [svg-clj.parametric :as p]
            [svg-clj.layout :as lo]))

(defn flip-y
  [pts]
  (mapv #(utils/v* % [1 -1]) pts))

(defn petal
  [cpts]
  (let [beza (apply path/bezier cpts)
        bezb (apply path/bezier (flip-y cpts))
        shape (tf/merge-paths beza bezb)
        ctr (tf/centroid shape)]
    (-> shape
        (tf/rotate -90)
        (tf/translate (utils/v* ctr [-1 -1])))))

(defn petal-ring
  [petal r n]
  (el/g
   (lo/distribute-on-curve
    (repeat n petal)
    (p/circle r))))

;; You can 'push' keys to the state.
;; they generate a slider with value 0 to 100, initiated at 1
;; and return that value (which reacts to slider changes)
(def a (int (/ (<< :a) 10)))
(def b (<< :b))

;; The parameters will update whenever you push a key.
;; Try uncommenting the next line.
;; (def c (/ (<< :c) 100))

(def petal-01
  (-> (petal [[0 0] [-60 -50] [50 -20] [75 0]])
      (tf/style {:fill \"#ff8b94\"
                 :stroke \"#ffaaa5\"
                 :stroke-width \"4px\"
                 :stroke-linecap \"round\"})))

(def petal-ring-01 (petal-ring petal-01 (* b 2) (+ 3 a)))

petal-ring-01")

#+END_SRC

* state
#+BEGIN_SRC clojure :tangle ./src/svg_clj_interactive/main.cljs
(def state
  (r/atom {:dwg {:input-type :drawing
                 :value default-editor-content-02}
           :zoom {:input-type :slider :value 100 :min 10 :max 500}}))

(defn >>
  [k]
  (let [{:keys [input-type]} (get @state k)
        v (if (= input-type :drawing) :result :value)]
  (get-in @state [k v])))

(defn <<
  [k]
  (when (and (not= (str k) ":")
             (keyword? k)
             (not (contains? @state k)))
    (let [ctrl {:input-type :slider :value 1 :min 0 :max 100}]
      (swap! state assoc k ctrl)))
  (>> k))

#+END_SRC

* eval
#+BEGIN_SRC clojure :tangle ./src/svg_clj_interactive/main.cljs
(def my-ns-map
  {'svg-clj.composites (ns-publics 'svg-clj.composites)
   'svg-clj.utils (ns-publics 'svg-clj.utils)
   'svg-clj.elements (ns-publics 'svg-clj.elements)
   'svg-clj.path (ns-publics 'svg-clj.path)
   'svg-clj.transforms (ns-publics 'svg-clj.transforms)
   'svg-clj.parametric (ns-publics 'svg-clj.parametric)
   'svg-clj.layout (ns-publics 'svg-clj.layout)
   'svg-clj-interactive.main {'state state
                              '>> >>
                              '<< <<}})

(def sci-ns-str
  "(ns svg-clj-interactive.main
  (:require [clojure.string :as str]
            [svg-clj.composites :as comp :refer [svg]]
            [svg-clj.utils :as utils]
            [svg-clj.elements :as el]
            [svg-clj.path :as path]
            [svg-clj.transforms :as tf]
            [svg-clj.parametric :as p]
            [svg-clj.layout :as lo]))")

(def sci-ctx (sci/init {:namespaces my-ns-map}))

(defn sci-eval
  [str]
  (let [f (fn [str]
            (->> (str/join "\n" [sci-ns-str str])
                 (sci/eval-string* sci-ctx)))]
    (try
      (f str)
      (catch :default e (. e -message)))))

(defn eval-state-param
  [[param {:keys [input-type value] :as ctrl}]]
  (when (= input-type :drawing)
    [param (merge ctrl {:result (sci-eval value)})]))

(defn eval-state
  []
  (let [new-state (mapv eval-state-param @state)]
    (reset! state (merge @state (into {} new-state)))))

;; populate any textarea state with the eval result
(eval-state)
#+END_SRC

* editor
#+BEGIN_SRC clojure :tangle ./src/svg_clj_interactive/main.cljs
(defn debounce [f interval]
  (let [dbnc (goog.async.Debouncer. f interval)]
    (fn [& args] (.apply (.-fire dbnc) dbnc (to-array args)))))

(defn editor-did-mount
  [[param {:keys [value _] :as ctrl}]]
  (fn [this]
    (let [cm (.fromTextArea  js/CodeMirror
                             (rdom/dom-node this)
                             #js {:mode "clojure"
                                  :theme "nord"
                                  :lineNumbers true
                                  :smartIndent true
                                  :tabSize 2})]
      (.setSize cm 450 450)
      (.on cm "change"
           (debounce
            (fn [e]
             (let [new-value (.getValue e)
                   new-result (sci-eval new-value)
                   new-ctrl (-> ctrl
                                (assoc :value new-value)
                                (assoc :result new-result))]
               (swap! state
                      (fn [data]
                        (-> data
                            (assoc param new-ctrl))))))
               2000)))))

(defn editor
  [[_ {:keys [value _]} :as state-entry]]
  (r/create-class
   {:render
    (fn [e] [:textarea
              {:default-value value}])
    :component-did-mount (editor-did-mount state-entry)}))

#+END_SRC

* controls
#+BEGIN_SRC clojure :tangle ./src/svg_clj_interactive/main.cljs
(defmulti control
  (fn [[_ {:keys [input-type]}]]
    input-type))

(defmethod control :slider
  [[param {:keys [value min max step] :as ctrl}]]
  [:div {:width "70%" :key param}
   [:span {:style {:font-weight "bold"
                   :display "inline-block"
                   :width "40px"
                   :text-align "right"}} (name param)]
   [:input {:type "range" :value value :min min :max max :step step
            :style {:width "200px"
                    :padding 0
                    :vertical-align "middle"
                    :margin "0px 10px"}
            :on-change
            (fn [e]
              (let [new-value (js/parseInt (.. e -target -value))
                    new-ctrl (assoc ctrl :value new-value)]
                (swap! state
                       (fn [data]
                         (-> data
                             (assoc param new-ctrl))))
                (eval-state)))}]
   [:span value]])
#+END_SRC

* drawing
#+BEGIN_SRC clojure :tangle ./src/svg_clj_interactive/main.cljs
#_(defn renderable?
  [elem]
  (when (seqable? elem)
    #_(and (seqable? elem)
           (not= sci.impl.vars/SciVar (type elem)))
    (#{:svg :text :g :rect :circle :ellipse :line :polygon :polyline :path :image} (first elem))))


(defn renderable-element?
  [elem]
  (and (vector? elem)
       (keyword? (first elem))
       (not= (str (first elem)) ":")
       (not (str/includes? (str (first elem)) "/"))
       (not (re-matches #"[0-9.#].*" (name (first elem))))
       (re-matches #"[a-zA-Z0-9.#]+" (name (first elem)))))

(defn renderable?
  [elem]
  (when (or (renderable-element? elem) (seq? elem))
    (let [[k props content] elem
          [props content] (if (and (nil? content)
                                   (not (map? props)))
                            [nil props]
                            [props content])]
      (cond
        (seq? elem) (not (empty? (filter renderable? elem)))
        (seq? content) (not (empty? (filter renderable? content)))
        :else (or (renderable-element? content)
                  (renderable-element? elem)
                  (string? content)
                  (number? content))))))

(defn wrap-svg
  [elem]
  [:div {:style {:width "450px"
                 :height "450px"
                 :margin "7px"
                 :border-style "solid"
                 :border-width "1px"
                 :border-radius "11px 11px 4px 11px"
                 :border-color "slategray"
                 :overflow "auto"
                 :resize "both"}}
   (if (renderable? elem)
     (let [sc (/ (>> :zoom) 100)
           edge-offset 10
           [w h] (-> (tf/bb-dims elem)
                     (utils/v* [sc sc])
                     (utils/v+ [edge-offset edge-offset]))
           [w2 h2] (utils/v* [2 2] [w h])
           elem (if (= :svg (first elem))
                  (drop 2 elem)
                  elem)]
       [:svg {:width (+ w edge-offset)
              :height (+ h edge-offset)
              :viewBox (str/join " " [(- (/ w 2)) (- (/ h 2)) w h])
              :xmlns "http://www.w3.org/2000/svg"}
        (-> (el/g elem)
            (tf/scale [sc sc]))])
     [:pre [:code "Waiting for renderable content"]])])

(defmethod control :drawing
  [[param {:keys [value result] :as ctrl} :as state-entry]]
  (let [zoom [:zoom (:zoom @state)]
        zoom-ctrl [control zoom]]
    [:<>
    [:div {:style {:width "100%"
                   :display "flex"
                   :flex-flow "wrap"
                   :justify-content "center"}}
     [editor state-entry]
     [:div (wrap-svg (get-in @state [param :result]))
      [:span {:style {:position "relative"
                      :left "35px"}} zoom-ctrl]]]
     [:pre {:style {:max-width "700px"
                    :max-height "300px"
                    :margin "0 auto"}}
      [:code.block (with-out-str (cljs.pprint/pprint result))]]]))

#+END_SRC

* doc
#+begin_src clojure :tangle ./src/svg_clj_interactive/main.cljs
(defn doc []
  [:<>
   [:h1 {:style {:width "100%"
                 :text-align "center"}} "svg-clj"]
   (into [:div {:style
                {:width "400px"
                 :margin "0 auto"
                 :display "flex"
                 :flex-direction "column"
                 :justify-content "center"}}
          [:h3 "Parameters"]]
         (for [param (dissoc @state :zoom :dwg)]
                 [control param]))
   [control [:dwg (:dwg @state)]]])

#+end_src

* mount
#+BEGIN_SRC clojure :tangle ./src/svg_clj_interactive/main.cljs
(defn mount [app]
  (rdom/render [app] (js/document.getElementById "root")))

(mount doc)
(defn ^:after-load re-render [] (mount doc))
(defonce go (do (mount doc) true))
#+END_SRC
